name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  RUST_BACKTRACE: full
  VCPKG_ROOT: D:\vcpkg

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Install build tools
      run: |
        choco install -y llvm
        choco install -y nasm
        choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install -y git

    - name: Clean up conflicting vcpkg environment
      run: |
        # 清除可能冲突的环境变量
        $env:VCPKG_ROOT = "D:\vcpkg"
        [Environment]::SetEnvironmentVariable("VCPKG_ROOT", $null, "Process")

    - name: Install vcpkg and Opus
      run: |
        # 安装 vcpkg
        git clone https://github.com/microsoft/vcpkg.git D:\vcpkg
        cd D:\vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        
        # 安装 Opus（多流支持是默认包含的）
        .\vcpkg install opus:x64-windows-static
        
        # 创建正确的目录结构
        $vcpkgDir = "D:\vcpkg\installed\x64-windows-static"
        $includeDir = "$vcpkgDir\include"
        
        # 创建 opus 子目录并移动头文件
        New-Item -ItemType Directory -Path "$includeDir\opus" -Force
        Get-ChildItem "$includeDir\*.h" | Where-Object { $_.Name -like "opus*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$includeDir\opus\" -Force
        }
        
        Write-Host "Opus installation completed"
        Write-Host "Opus headers:"
        Get-ChildItem "$includeDir\opus"

    - name: Build Opus from source as fallback
      run: |
        # 如果 vcpkg 安装的 Opus 没有多流头文件，从源码构建
        if (-not (Test-Path "D:\vcpkg\installed\x64-windows-static\include\opus\opus_multistream.h")) {
            Write-Host "Building Opus from source..."
            git clone https://github.com/xiph/opus.git D:\opus-src
            cd D:\opus-src
            
            mkdir build
            cd build
            
            cmake .. -DCMAKE_INSTALL_PREFIX=D:\opus -DCMAKE_BUILD_TYPE=Release -DOPUS_BUILD_SHARED_LIBRARY=OFF
            cmake --build . --config Release --target install
            
            # 创建 opus 子目录
            New-Item -ItemType Directory -Path "D:\opus\include\opus" -Force
            Get-ChildItem "D:\opus\include\*.h" | ForEach-Object {
                Copy-Item $_.FullName -Destination "D:\opus\include\opus\" -Force
            }
            
            # 更新环境变量指向源码构建的 Opus
            echo "OPUS_ROOT=D:\opus" >> $env:GITHUB_ENV
            echo "LIBRARY_PATH=D:\opus\lib;$env:LIBRARY_PATH" >> $env:GITHUB_ENV
            echo "C_INCLUDE_PATH=D:\opus\include;$env:C_INCLUDE_PATH" >> $env:GITHUB_ENV
        }

    - name: Patch magnum-opus build script
      run: |
        # 首先构建项目来下载依赖
        cargo fetch
        
        # 查找 magnum-opus 在 cargo 注册表中的位置
        $magnumOpusDir = Get-ChildItem -Path "$env:USERPROFILE\.cargo\registry\src" -Recurse -Directory -Filter "magnum-opus-*" | Select-Object -First 1
        
        if (-not $magnumOpusDir) {
            # 如果在 registry 中没找到，尝试在 git 依赖中查找
            $magnumOpusDir = Get-ChildItem -Path "$env:USERPROFILE\.cargo\git\checkouts" -Recurse -Directory -Filter "magnum-opus-*" | Select-Object -First 1
        }
        
        if ($magnumOpusDir) {
            Write-Host "Found magnum-opus at: $($magnumOpusDir.FullName)"
            $buildScript = Join-Path $magnumOpusDir.FullName "build.rs"
            
            if (Test-Path $buildScript) {
                # 备份
                Copy-Item $buildScript "$buildScript.backup"
                
                # 读取内容
                $content = Get-Content $buildScript -Raw
                
                # 替换硬编码的 vcpkg 路径
                $newContent = $content -replace "C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Enterprise\\\\VC\\\\vcpkg\\\\installed\\\\x64-windows-static", "D:\\\\vcpkg\\\\installed\\\\x64-windows-static"
                
                # 如果从源码构建了 Opus，使用那个路径
                if (Test-Path "D:\opus\include\opus\opus_multistream.h") {
                    $newContent = $newContent -replace "D:\\\\vcpkg\\\\installed\\\\x64-windows-static", "D:\\\\opus"
                }
                
                Set-Content $buildScript $newContent
                Write-Host "Successfully patched magnum-opus build script"
            } else {
                Write-Host "build.rs not found in magnum-opus directory"
            }
        } else {
            Write-Host "magnum-opus directory not found, skipping patch"
        }

    - name: Set pkg-config environment
      run: |
        # 设置 pkg-config 环境变量
        if (Test-Path "D:\opus\include\opus\opus_multistream.h") {
            $opusPath = "D:\opus"
        } else {
            $opusPath = "D:\vcpkg\installed\x64-windows-static"
        }
        
        # 创建 pkg-config 文件
        $pkgConfigDir = "$env:USERPROFILE\pkgconfig"
        New-Item -ItemType Directory -Path $pkgConfigDir -Force
        
        # 使用单行字符串避免多行字符串的格式问题
        $opusPcContent = "prefix=$opusPath`nexec_prefix=`${prefix}`nlibdir=`${prefix}/lib`nincludedir=`${prefix}/include`n`nName: opus`nDescription: Opus codec library`nVersion: 1.3.1`nRequires:`nLibs: -L`${libdir} -lopus`nCflags: -I`${includedir}"
        
        Set-Content -Path "$pkgConfigDir\opus.pc" -Value $opusPcContent
        echo "PKG_CONFIG_PATH=$pkgConfigDir" >> $env:GITHUB_ENV

    - name: Set final environment variables
      run: |
        # 确定使用哪个 Opus 安装
        if (Test-Path "D:\opus\include\opus\opus_multistream.h") {
            $opusPath = "D:\opus"
        } else {
            $opusPath = "D:\vcpkg\installed\x64-windows-static"
        }
        
        echo "LIBRARY_PATH=$opusPath\lib" >> $env:GITHUB_ENV
        echo "C_INCLUDE_PATH=$opusPath\include" >> $env:GITHUB_ENV
        echo "RUSTFLAGS=-L $opusPath\lib" >> $env:GITHUB_ENV

    - name: Verify Opus installation
      run: |
        Write-Host "Checking for opus_multistream.h..."
        if (Test-Path "D:\vcpkg\installed\x64-windows-static\include\opus\opus_multistream.h") {
            Write-Host "✓ Found in vcpkg installation"
        }
        if (Test-Path "D:\opus\include\opus\opus_multistream.h") {
            Write-Host "✓ Found in source installation"
        }

    - name: Build RustDesk
      run: |
        cargo build --release --target x86_64-pc-windows-msvc --verbose

    - name: Collect artifacts
      run: |
        mkdir artifacts
        Copy-Item "target\x86_64-pc-windows-msvc\release\rustdesk.exe" -Destination "artifacts\" -ErrorAction SilentlyContinue
        Copy-Item "target\x86_64-pc-windows-msvc\release\*.dll" -Destination "artifacts\" -ErrorAction SilentlyContinue

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows
        path: artifacts/
        if-no-files-found: warn
