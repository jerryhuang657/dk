name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Install Windows build dependencies
      run: |
        choco upgrade -y llvm
        choco install nasm -y
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git -y
        choco install perl -y
        choco install vcredist140 -y

    - name: Install vcpkg and build dependencies
      run: |
        # 安装 vcpkg
        git clone https://github.com/microsoft/vcpkg.git D:\vcpkg
        cd D:\vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        
        # 安装所有必要的库
        .\vcpkg install opus:x64-windows-static
        .\vcpkg install libyuv:x64-windows-static
        .\vcpkg install libvpx:x64-windows-static
        .\vcpkg install libvpx:x64-windows-static-md
        
        # 集成到系统
        .\vcpkg integrate install
        
        echo "VCPKG_ROOT=D:\vcpkg" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV

    - name: Create proper library directory structure
      run: |
        # 为 libvpx 创建正确的目录结构
        $vcpkgDir = "D:\vcpkg\installed\x64-windows-static"
        
        # 创建 vpx 子目录并移动头文件
        $vpxIncludeDir = "$vcpkgDir\include"
        New-Item -ItemType Directory -Path "$vpxIncludeDir\vpx" -Force
        Get-ChildItem "$vpxIncludeDir\*.h" | Where-Object { $_.Name -like "vpx*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$vpxIncludeDir\vpx\" -Force
        }
        
        # 为 libyuv 创建目录结构
        New-Item -ItemType Directory -Path "$vpxIncludeDir\libyuv" -Force
        Get-ChildItem "$vpxIncludeDir\*.h" | Where-Object { $_.Name -like "*yuv*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$vpxIncludeDir\libyuv\" -Force
        }
        
        Write-Host "Created library directory structure"
        Write-Host "vpx directory contents:"
        Get-ChildItem "$vpxIncludeDir\vpx"
        Write-Host "libyuv directory contents:"
        Get-ChildItem "$vpxIncludeDir\libyuv"

    - name: Patch scrap build script
      run: |
        # 修改 scrap 库的构建脚本以避免硬编码路径
        $scrapBuildScript = "libs\scrap\build.rs"
        if (Test-Path $scrapBuildScript) {
            # 备份原始文件
            Copy-Item $scrapBuildScript "$scrapBuildScript.backup"
            
            # 读取内容
            $content = Get-Content $scrapBuildScript -Raw
            
            # 替换硬编码的 vcpkg 路径
            $newContent = $content -replace "C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Enterprise\\\\VC\\\\vcpkg\\\\installed\\\\x64-windows-static", "D:\\\\vcpkg\\\\installed\\\\x64-windows-static"
            
            # 添加回退逻辑
            $fallbackLogic = @'
        // Fallback logic for GitHub Actions
        if !Path::new("D:\\vcpkg\\installed\\x64-windows-static\\include\\vpx\\vpx.h").exists() {
            // Try to find libraries in alternative locations
            if let Ok(alt_path) = std::env::var("VCPKG_ROOT") {
                let alt_include = format!("{}\\installed\\x64-windows-static\\include", alt_path);
                let alt_lib = format!("{}\\installed\\x64-windows-static\\lib", alt_path);
                
                if Path::new(&alt_include).exists() {
                    println!("cargo:include={}", alt_include);
                    println!("cargo:rustc-link-search={}", alt_lib);
                }
            }
        }
'@
            
            # 在适当的位置插入回退逻辑
            $newContent = $newContent -replace "(fn link_homebrew_m1\(\) -> Result<\(\)> \{)", "`$1`n`n    $fallbackLogic`n"
            
            Set-Content $scrapBuildScript $newContent
            Write-Host "Patched scrap build script"
        }

    - name: Setup environment variables
      run: |
        $vcpkgDir = "D:\vcpkg\installed\x64-windows-static"
        echo "LIBRARY_PATH=$vcpkgDir\lib;$env:LIBRARY_PATH" >> $env:GITHUB_ENV
        echo "C_INCLUDE_PATH=$vcpkgDir\include;$env:C_INCLUDE_PATH" >> $env:GITHUB_ENV
        echo "CPLUS_INCLUDE_PATH=$vcpkgDir\include;$env:CPLUS_INCLUDE_PATH" >> $env:GITHUB_ENV
        
        # 设置库特定的变量
        echo "PKG_CONFIG_PATH=$vcpkgDir\lib\pkgconfig;$env:PKG_CONFIG_PATH" >> $env:GITHUB_ENV

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: '3.19.5'

    - name: Find Flutter project directory
      run: |
        $flutterDirs = Get-ChildItem -Recurse -Filter "pubspec.yaml" | Select-Object -First 1
        if ($flutterDirs) {
          $flutterDir = $flutterDirs.Directory.FullName
          echo "FLUTTER_DIR=$flutterDir" >> $env:GITHUB_ENV
        }

    - name: Install Flutter dependencies
      if: env.FLUTTER_DIR != null
      run: |
        cd $env:FLUTTER_DIR
        flutter pub get

    - name: Configure LLVM path
      run: |
        $llvmPath = "C:\Program Files\LLVM\bin"
        if (Test-Path $llvmPath) {
          echo "LLVM_PATH=$llvmPath" >> $env:GITHUB_ENV
        }

    - name: Build RustDesk with vcpkg libraries
      run: |
        # 设置 Rust 链接器标志
        $env:RUSTFLAGS = "-L D:\vcpkg\installed\x64-windows-static\lib"
        
        Write-Host "Building with vcpkg libraries..."
        Write-Host "Library path: $env:LIBRARY_PATH"
        Write-Host "Include path: $env:C_INCLUDE_PATH"
        
        # 检查必要的头文件
        $vcpkgInclude = "D:\vcpkg\installed\x64-windows-static\include"
        Write-Host "Checking for vpx/vp8.h..."
        if (Test-Path "$vcpkgInclude\vpx\vp8.h") {
            Write-Host "vpx/vp8.h found!"
        } else {
            Write-Host "Available vpx headers:"
            Get-ChildItem "$vcpkgInclude\vpx" -Filter "*.h" | ForEach-Object { Write-Host "  $($_.Name)" }
        }
        
        # 构建项目
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Alternative build with system libraries
      if: failure()
      run: |
        Write-Host "Trying alternative approach with system libraries..."
        
        # 安装系统版本的库
        choco install libvpx -y
        choco install libyuv -y
        
        # 清理并重新构建
        cargo clean
        cargo build --release --target ${{ matrix.target }} --features "system-libs" --verbose

    - name: Final build attempt with vendored libraries
      if: failure()
      run: |
        Write-Host "Final attempt: using vendored libraries..."
        
        # 尝试使用内置的库版本
        cargo build --release --target ${{ matrix.target }} --no-default-features --features "vendored" --verbose

    - name: Collect build artifacts
      if: success()
      run: |
        $artifactDir = "artifacts"
        New-Item -ItemType Directory -Path $artifactDir -Force
        
        $releaseDir = "target\${{ matrix.target }}\release"
        
        Get-ChildItem $releaseDir -Filter "*.exe" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        Get-ChildItem $releaseDir -Filter "*.dll" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        Write-Host "Build artifacts collected"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-${{ matrix.target }}
        path: artifacts/
        if-no-files-found: warn

    - name: Show build summary
      run: |
        Write-Host "=== Build Summary ==="
        Write-Host "Target: ${{ matrix.target }}"
        Write-Host "Rust version: $(rustc --version)"
        Write-Host "Build status: $(if (Test-Path 'artifacts\*.exe') {'SUCCESS'} else {'FAILED'})"
