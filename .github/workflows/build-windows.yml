name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

env:
  CARGO_TERM_COLOR: always
  VCPKG_ROOT: D:\vcpkg

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install vcpkg and dependencies
      run: |
        # 安装 vcpkg
        git clone https://github.com/microsoft/vcpkg.git D:\vcpkg
        cd D:\vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        
        # 安装 Opus 开发库（静态链接版本）
        .\vcpkg install opus:x64-windows-static
        .\vcpkg install opus:x64-windows-static-md  # 也安装动态链接版本以防万一
        
        # 安装其他可能的依赖
        .\vcpkg install libyuv:x64-windows-static
        .\vcpkg install libvpx:x64-windows-static
        
        # 集成到 Visual Studio
        .\vcpkg integrate install

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Install Windows build dependencies
      run: |
        choco upgrade -y llvm
        choco install nasm -y
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install perl -y  # 某些构建脚本需要 Perl

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: '3.19.5'

    - name: Find Flutter project directory
      id: find-flutter
      run: |
        $flutterDirs = Get-ChildItem -Recurse -Filter "pubspec.yaml" | Select-Object -First 1
        if ($flutterDirs) {
          $flutterDir = $flutterDirs.Directory.FullName
          Write-Host "Found Flutter project at: $flutterDir"
          echo "FLUTTER_DIR=$flutterDir" >> $env:GITHUB_ENV
        }

    - name: Install Flutter dependencies
      if: env.FLUTTER_DIR != null
      run: |
        cd $env:FLUTTER_DIR
        flutter pub get

    - name: Set vcpkg environment variables
      run: |
        echo "VCPKG_ROOT=D:\vcpkg" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
        
        # 设置 vcpkg 工具链文件路径
        $vcpkgToolchain = "D:\vcpkg\scripts\buildsystems\vcpkg.cmake"
        echo "CMAKE_TOOLCHAIN_FILE=$vcpkgToolchain" >> $env:GITHUB_ENV
        
        # 添加到 PATH
        $env:PATH = "D:\vcpkg;$env:PATH"

    - name: Build RustDesk with vcpkg support
      run: |
        # 设置 vcpkg 相关环境变量
        $env:VCPKG_ROOT = "D:\vcpkg"
        $env:VCPKGRS_DYNAMIC = "1"
        
        # 检查 vcpkg 安装的 Opus 库
        Write-Host "Checking vcpkg Opus installation..."
        if (Test-Path "D:\vcpkg\installed\x64-windows-static\include\opus\opus_multistream.h") {
          Write-Host "Opus multistream header found!"
        } else {
          Write-Host "Opus multistream header not found, listing vcpkg contents:"
          Get-ChildItem "D:\vcpkg\installed\x64-windows-static\include" -Recurse -Filter "*opus*"
        }
        
        # 显示环境信息
        Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Host "VCPKGRS_DYNAMIC: $env:VCPKGRS_DYNAMIC"
        
        # 构建项目
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Alternative build approach if vcpkg fails
      if: failure()
      run: |
        # 如果 vcpkg 方法失败，尝试使用系统包管理器
        Write-Host "Trying alternative approach with system packages..."
        
        # 尝试使用 Chocolatey 安装 Opus
        choco install opus -y --force
        choco install opus-tools -y
        
        # 设置环境变量指向系统安装的 Opus
        $opusPath = "C:\Program Files\Opus"
        if (Test-Path $opusPath) {
          echo "OPUS_ROOT=$opusPath" >> $env:GITHUB_ENV
          $env:PATH = "$opusPath\bin;$env:PATH"
        }
        
        # 重新尝试构建
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Collect build artifacts
      if: success()
      run: |
        $artifactDir = "artifacts"
        New-Item -ItemType Directory -Path $artifactDir -Force
        
        $releaseDir = "target\${{ matrix.target }}\release"
        
        # 复制可执行文件
        Get-ChildItem $releaseDir -Filter "*.exe" | ForEach-Object {
          Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        # 复制 DLL 文件
        Get-ChildItem $releaseDir -Filter "*.dll" | ForEach-Object {
          Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        Write-Host "Collected artifacts:"
        Get-ChildItem $artifactDir

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-${{ matrix.target }}
        path: artifacts/
        if-no-files-found: error
