name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Install Windows build dependencies
      run: |
        choco upgrade -y llvm
        choco install nasm -y
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git -y
        choco install perl -y
        choco install vcredist140 -y
        # 安装音频处理相关的依赖
        choco install libsamplerate -y

    - name: Install vcpkg and all required dependencies
      run: |
        # 安装 vcpkg
        git clone https://github.com/microsoft/vcpkg.git D:\vcpkg
        cd D:\vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        
        # 安装所有必要的库
        .\vcpkg install opus:x64-windows-static
        .\vcpkg install libyuv:x64-windows-static
        .\vcpkg install libvpx:x64-windows-static
        .\vcpkg install aom:x64-windows-static
        
        # 集成到系统
        .\vcpkg integrate install
        
        echo "VCPKG_ROOT=D:\vcpkg" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV

    - name: Create proper library directory structure
      run: |
        # 为所有库创建正确的目录结构
        $vcpkgDir = "D:\vcpkg\installed\x64-windows-static"
        $includeDir = "$vcpkgDir\include"
        
        # 创建 vpx 子目录
        New-Item -ItemType Directory -Path "$includeDir\vpx" -Force
        Get-ChildItem "$includeDir\*.h" | Where-Object { $_.Name -like "vpx*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$includeDir\vpx\" -Force
        }
        
        # 创建 libyuv 子目录
        New-Item -ItemType Directory -Path "$includeDir\libyuv" -Force
        Get-ChildItem "$includeDir\*.h" | Where-Object { $_.Name -like "*yuv*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$includeDir\libyuv\" -Force
        }
        
        # 创建 aom 子目录
        New-Item -ItemType Directory -Path "$includeDir\aom" -Force
        Get-ChildItem "$includeDir\*.h" | Where-Object { $_.Name -like "aom*" } | ForEach-Object {
            Copy-Item $_.FullName -Destination "$includeDir\aom\" -Force
        }
        
        Write-Host "Created library directory structure"

    - name: Setup environment variables
      run: |
        $vcpkgDir = "D:\vcpkg\installed\x64-windows-static"
        echo "LIBRARY_PATH=$vcpkgDir\lib;$env:LIBRARY_PATH" >> $env:GITHUB_ENV
        echo "C_INCLUDE_PATH=$vcpkgDir\include;$env:C_INCLUDE_PATH" >> $env:GITHUB_ENV
        echo "CPLUS_INCLUDE_PATH=$vcpkgDir\include;$env:CPLUS_INCLUDE_PATH" >> $env:GITHUB_ENV
        echo "PKG_CONFIG_PATH=$vcpkgDir\lib\pkgconfig;$env:PKG_CONFIG_PATH" >> $env:GITHUB_ENV

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: '3.19.5'

    - name: Find Flutter project directory
      run: |
        $flutterDirs = Get-ChildItem -Recurse -Filter "pubspec.yaml" | Select-Object -First 1
        if ($flutterDirs) {
          $flutterDir = $flutterDirs.Directory.FullName
          echo "FLUTTER_DIR=$flutterDir" >> $env:GITHUB_ENV
        }

    - name: Install Flutter dependencies
      if: env.FLUTTER_DIR != null
      run: |
        cd $env:FLUTTER_DIR
        flutter pub get

    - name: Configure LLVM path
      run: |
        $llvmPath = "C:\Program Files\LLVM\bin"
        if (Test-Path $llvmPath) {
          echo "LLVM_PATH=$llvmPath" >> $env:GITHUB_ENV
        }

    - name: Build RustDesk with audio features enabled
      run: |
        # 设置 Rust 链接器标志
        $env:RUSTFLAGS = "-L D:\vcpkg\installed\x64-windows-static\lib"
        
        Write-Host "Building with audio resampling features..."
        
        # 启用音频重采样特性
        cargo build --release --target ${{ matrix.target }} --features "use_dasp" --verbose

    - name: Alternative build with samplerate feature
      if: failure()
      run: |
        Write-Host "Trying alternative approach: using samplerate feature..."
        cargo clean
        
        # 尝试使用 samplerate 替代 dasp
        cargo build --release --target ${{ matrix.target }} --features "use_samplerate" --verbose

    - name: Build without audio resampling
      if: failure()
      run: |
        Write-Host "Building without audio resampling features..."
        cargo clean
        
        # 禁用音频重采样特性
        cargo build --release --target ${{ matrix.target }} --no-default-features --features "flutter" --verbose

    - name: Final attempt - minimal build
      if: failure()
      run: |
        Write-Host "Final attempt: minimal build with only essential features..."
        cargo clean
        
        # 只启用最基本的特性
        cargo build --release --target ${{ matrix.target }} --no-default-features --features "cli" --verbose

    - name: Collect build artifacts
      if: success()
      run: |
        $artifactDir = "artifacts"
        New-Item -ItemType Directory -Path $artifactDir -Force
        
        $releaseDir = "target\${{ matrix.target }}\release"
        
        Get-ChildItem $releaseDir -Filter "*.exe" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        Get-ChildItem $releaseDir -Filter "*.dll" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-${{ matrix.target }}
        path: artifacts/
        if-no-files-found: warn

    - name: Show build summary
      run: |
        Write-Host "=== Build Summary ==="
        Write-Host "Target: ${{ matrix.target }}"
        Write-Host "Rust version: $(rustc --version)"
        Write-Host "Build status: $(if (Test-Path 'artifacts\*.exe') {'SUCCESS'} else {'FAILED'})"
