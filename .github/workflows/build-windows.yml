name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Install Windows build dependencies
      run: |
        choco upgrade -y llvm
        choco install nasm -y
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git -y
        choco install perl -y
        choco install vcredist140 -y
        # 安装预编译的 Opus 库
        choco install opus -y
        choco install opus-tools -y

    - name: Setup Opus from system installation
      run: |
        # 查找系统安装的 Opus
        $opusPaths = @(
            "C:\Program Files\Opus",
            "C:\Program Files (x86)\Opus",
            "C:\opus"
        )
        
        foreach ($path in $opusPaths) {
            if (Test-Path $path) {
                echo "OPUS_ROOT=$path" >> $env:GITHUB_ENV
                echo "Found Opus at: $path"
                break
            }
        }
        
        # 如果没有找到，尝试通过 vcpkg 安装
        if (-not $env:OPUS_ROOT) {
            Write-Host "Installing Opus via vcpkg..."
            git clone https://github.com/microsoft/vcpkg.git D:\vcpkg
            cd D:\vcpkg
            .\bootstrap-vcpkg.bat -disableMetrics
            .\vcpkg install opus:x64-windows-static
            echo "OPUS_ROOT=D:\vcpkg\installed\x64-windows-static" >> $env:GITHUB_ENV
        }

    - name: Create required Opus directory structure
      run: |
        # 确保有 opus 子目录结构
        $opusIncludeDir = "$env:OPUS_ROOT\include"
        if (Test-Path $opusIncludeDir) {
            # 创建 opus 子目录
            $opusSubDir = "$opusIncludeDir\opus"
            New-Item -ItemType Directory -Path $opusSubDir -Force
            
            # 移动所有头文件到 opus 子目录
            Get-ChildItem "$opusIncludeDir\*.h" | ForEach-Object {
                Copy-Item $_.FullName -Destination "$opusSubDir\" -Force
            }
            
            Write-Host "Opus include structure created at: $opusSubDir"
            Get-ChildItem $opusSubDir
        }

    - name: Setup environment variables for Opus
      run: |
        echo "LIBRARY_PATH=$env:OPUS_ROOT\lib;$env:LIBRARY_PATH" >> $env:GITHUB_ENV
        echo "C_INCLUDE_PATH=$env:OPUS_ROOT\include;$env:C_INCLUDE_PATH" >> $env:GITHUB_ENV
        echo "CPLUS_INCLUDE_PATH=$env:OPUS_ROOT\include;$env:CPLUS_INCLUDE_PATH" >> $env:GITHUB_ENV
        
        # 设置 magnum-opus 特定的变量
        echo "MAGNUM_OPUS_STATIC=1" >> $env:GITHUB_ENV

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: '3.19.5'

    - name: Find Flutter project directory
      run: |
        $flutterDirs = Get-ChildItem -Recurse -Filter "pubspec.yaml" | Select-Object -First 1
        if ($flutterDirs) {
          $flutterDir = $flutterDirs.Directory.FullName
          echo "FLUTTER_DIR=$flutterDir" >> $env:GITHUB_ENV
        }

    - name: Install Flutter dependencies
      if: env.FLUTTER_DIR != null
      run: |
        cd $env:FLUTTER_DIR
        flutter pub get

    - name: Configure LLVM path
      run: |
        $llvmPath = "C:\Program Files\LLVM\bin"
        if (Test-Path $llvmPath) {
          echo "LLVM_PATH=$llvmPath" >> $env:GITHUB_ENV
        }

    - name: Build RustDesk with explicit Opus paths
      run: |
        # 设置 Rust 链接器标志
        $env:RUSTFLAGS = "-L $env:OPUS_ROOT\lib -l static=opus"
        
        Write-Host "Building with OPUS_ROOT: $env:OPUS_ROOT"
        Write-Host "Library path: $env:LIBRARY_PATH"
        Write-Host "Include path: $env:C_INCLUDE_PATH"
        
        # 检查必要的头文件
        if (Test-Path "$env:OPUS_ROOT\include\opus\opus_multistream.h") {
            Write-Host "opus_multistream.h found!"
        } else {
            Write-Host "Warning: opus_multistream.h not found at expected location"
            Write-Host "Available headers:"
            Get-ChildItem "$env:OPUS_ROOT\include" -Recurse -Filter "*.h"
        }
        
        # 构建项目
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Alternative approach - use vendored Opus
      if: failure()
      run: |
        Write-Host "Trying vendored Opus approach..."
        
        # 清理之前的构建
        cargo clean
        
        # 设置环境变量使用内置的 Opus
        echo "MAGNUM_OPUS_STATIC=0" >> $env:GITHUB_ENV
        $env:RUSTFLAGS = ""
        
        # 尝试禁用某些特性或使用默认设置
        cargo build --release --target ${{ matrix.target }} --no-default-features --verbose

    - name: Final build attempt
      if: failure()
      run: |
        Write-Host "Final attempt: building without Opus-specific features..."
        
        # 尝试跳过某些依赖或使用替代实现
        cargo build --release --target ${{ matrix.target }} --features "vendored-opus" --verbose

    - name: Collect build artifacts
      if: success()
      run: |
        $artifactDir = "artifacts"
        New-Item -ItemType Directory -Path $artifactDir -Force
        
        $releaseDir = "target\${{ matrix.target }}\release"
        
        # 收集所有可执行文件和 DLL
        Get-ChildItem $releaseDir -Filter "*.exe" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        Get-ChildItem $releaseDir -Filter "*.dll" | ForEach-Object {
            Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        Write-Host "Build artifacts collected"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-${{ matrix.target }}
        path: artifacts/
        if-no-files-found: warn

    - name: Show build summary
      run: |
        Write-Host "=== Build Summary ==="
        Write-Host "Target: ${{ matrix.target }}"
        Write-Host "Rust version: $(rustc --version)"
        Write-Host "Opus root: $env:OPUS_ROOT"
        Write-Host "Build status: $(if (Test-Path 'artifacts\*.exe') {'SUCCESS'} else {'FAILED'})"
