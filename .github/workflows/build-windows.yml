name: Build RustDesk for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Install Windows build dependencies
      run: |
        choco upgrade -y llvm
        choco install nasm -y
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git -y
        choco install perl -y
        # 安装 Opus 开发库
        choco install opus -y
        choco install opus-tools -y
        choco install vcredist140 -y

    - name: Install and build Opus from source
      run: |
        # 下载 Opus 源代码
        git clone https://github.com/xiph/opus.git D:\opus-src
        cd D:\opus-src
        
        # 创建构建目录
        mkdir build
        cd build
        
        # 配置和构建 Opus
        cmake .. -DCMAKE_INSTALL_PREFIX=D:\opus -DCMAKE_BUILD_TYPE=Release -DOPUS_BUILD_SHARED_LIBRARY=OFF
        cmake --build . --config Release --target install
        
        # 创建 opus 子目录并移动头文件
        New-Item -ItemType Directory -Path "D:\opus\include\opus" -Force
        Get-ChildItem "D:\opus\include\*.h" | ForEach-Object {
          Copy-Item $_.FullName -Destination "D:\opus\include\opus\" -Force
        }
        
        Write-Host "Opus installed successfully"
        Write-Host "Opus include directory:"
        Get-ChildItem "D:\opus\include" -Recurse

    - name: Setup Opus environment variables
      run: |
        echo "OPUS_ROOT=D:\opus" >> $env:GITHUB_ENV
        echo "OPUS_DIR=D:\opus" >> $env:GITHUB_ENV
        echo "LIBRARY_PATH=D:\opus\lib;$env:LIBRARY_PATH" >> $env:GITHUB_ENV
        echo "C_INCLUDE_PATH=D:\opus\include;$env:C_INCLUDE_PATH" >> $env:GITHUB_ENV
        
        # 设置 magnum-opus 构建标志
        echo "MAGNUM_OPUS_STATIC=1" >> $env:GITHUB_ENV
        echo "PKG_CONFIG_PATH=D:\opus\lib\pkgconfig;$env:PKG_CONFIG_PATH" >> $env:GITHUB_ENV

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: '3.19.5'

    - name: Find Flutter project directory
      run: |
        $flutterDirs = Get-ChildItem -Recurse -Filter "pubspec.yaml" | Select-Object -First 1
        if ($flutterDirs) {
          $flutterDir = $flutterDirs.Directory.FullName
          Write-Host "Found Flutter project at: $flutterDir"
          echo "FLUTTER_DIR=$flutterDir" >> $env:GITHUB_ENV
        } else {
          Write-Host "No Flutter project found, continuing without Flutter"
        }

    - name: Install Flutter dependencies
      if: env.FLUTTER_DIR != null
      run: |
        cd $env:FLUTTER_DIR
        flutter pub get

    - name: Configure LLVM path
      run: |
        $llvmPath = "C:\Program Files\LLVM\bin"
        if (Test-Path $llvmPath) {
          echo "LLVM_PATH=$llvmPath" >> $env:GITHUB_ENV
          $env:PATH = "$llvmPath;$env:PATH"
        }

    - name: Patch magnum-opus build script (临时解决方案)
      run: |
        # 修改 magnum-opus 的构建脚本以避免硬编码路径
        $magnumOpusPath = "$env:USERPROFILE\.cargo\git\checkouts\magnum-opus-*"
        $magnumOpusDir = Get-ChildItem -Path $magnumOpusPath -Directory | Select-Object -First 1
        if ($magnumOpusDir) {
          $buildScript = Join-Path $magnumOpusDir.FullName "build.rs"
          if (Test-Path $buildScript) {
            # 备份原始文件
            Copy-Item $buildScript "$buildScript.backup"
            
            # 修改硬编码的 vcpkg 路径
            $content = Get-Content $buildScript -Raw
            $newContent = $content -replace "C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Enterprise\\\\VC\\\\vcpkg\\\\installed\\\\x64-windows-static", "D:\\\\opus"
            Set-Content $buildScript $newContent
            
            Write-Host "Patched magnum-opus build script"
          }
        }

    - name: Build RustDesk with custom linker flags
      run: |
        # 设置链接器标志
        $env:RUSTFLAGS = "-L D:\opus\lib -l static=opus"
        
        # 显示环境信息
        Write-Host "OPUS_ROOT: $env:OPUS_ROOT"
        Write-Host "C_INCLUDE_PATH: $env:C_INCLUDE_PATH"
        Write-Host "LIBRARY_PATH: $env:LIBRARY_PATH"
        
        # 检查头文件是否存在
        Write-Host "Checking opus headers..."
        if (Test-Path "D:\opus\include\opus\opus_multistream.h") {
          Write-Host "opus_multistream.h found!"
        } else {
          # 从源代码复制缺失的头文件
          if (Test-Path "D:\opus-src\include\opus_multistream.h") {
            Copy-Item "D:\opus-src\include\opus_multistream.h" -Destination "D:\opus\include\opus\" -Force
            Write-Host "Copied opus_multistream.h from source"
          }
        }
        
        # 构建项目
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Alternative build approach
      if: failure()
      run: |
        # 如果上述方法失败，尝试使用系统 Opus 库
        Write-Host "Trying alternative approach with system Opus..."
        echo "MAGNUM_OPUS_STATIC=0" >> $env:GITHUB_ENV
        
        # 清理并重新构建
        cargo clean
        cargo build --release --target ${{ matrix.target }} --features "system-opus" --verbose

    - name: Collect build artifacts
      if: success()
      run: |
        $artifactDir = "artifacts"
        New-Item -ItemType Directory -Path $artifactDir -Force
        
        $releaseDir = "target\${{ matrix.target }}\release"
        
        Get-ChildItem $releaseDir -Filter "*.exe" | ForEach-Object {
          Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        Get-ChildItem $releaseDir -Filter "*.dll" | ForEach-Object {
          Copy-Item $_.FullName -Destination "$artifactDir\$($_.Name)"
        }
        
        Write-Host "Collected artifacts:"
        Get-ChildItem $artifactDir

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-${{ matrix.target }}
        path: artifacts/
        if-no-files-found: error

    - name: Show build summary
      run: |
        Write-Host "=== Build Summary ==="
        Write-Host "Target: ${{ matrix.target }}"
        Write-Host "Rust version: $(rustc --version)"
        Write-Host "Cargo version: $(cargo --version)"
        if ($env:FLUTTER_DIR) {
          Write-Host "Flutter project found at: $env:FLUTTER_DIR"
        }
        Write-Host "Artifacts uploaded: rustdesk-windows-${{ matrix.target }}"
